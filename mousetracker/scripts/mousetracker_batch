#!/usr/bin/env python
"""
Bout Analyzer.   Extracts bilateral whisking and eyeblink data from a video snippet.

Usage:
    mousetracker_batch -h | --help
    mousetracker_batch --version
    mousetracker_batch ([-i <input_file> | --input <input_file>] | --print_config) [--config <config_file>]
                 [(-o <output_file> | --output <output_file>)] [(-v | --verbose)] [--clean]

Options:
    -h --help                   Show this screen and exit.
    --version                   Display the version and exit.
    --print_config              Print the default config value and exit.
    -i --input=<input_file>     Specify the file to process.
    -o --output=<output_file>   Specify a location to store the analyzed results.
    --config=<config_file>      Specify a path to a custom config file.  See --print-config for format.
    --clean                     If existing processed videos and analysis data exist, overwrite them with new.
    -v --verbose                Display extra diagnostic information during execution.

"""
import sys
import math
import subprocess
from joblib import Parallel, delayed
import cv2
from multiprocessing import cpu_count
from attrs_utils.interop import from_docopt

MAX_CPUS = math.ceil(cpu_count()/2)
FRAMERATE = 240
def main(inputargs):
    args = from_docopt(docstring=__doc__, argv=inputargs)

def chunk(source:str) -> [str]:
    """
    Break a video into sections to maximize CPU use.
    :param source: 
    :return: 
    """
    cap = cv2.VideoCapture(source)
    framecount = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    duration_sec = framecount / FRAMERATE
    nchunks = duration_sec

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:] if len(sys.argv) > 1 else "-h"))